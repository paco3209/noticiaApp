var fs = require('fs');
var engine = require('../');
var handlebars = require('handlebars');
var readFile = fs.readFile;
var readFileSync = fs.readFileSync;

describe('handlebars engine', function() {
  var user = { name: 'Leonidas' };
  var path = 'test/fixtures/user.hbs';

  afterEach(function() {
    fs.readFile = readFile;
    fs.readFileSync = readFileSync;
  });

  it('supports locals', function(done) {
    var locals = { user: user };
    engine(path, locals, function(err, html) {
      if(err) return done(err);
      html.should.equal('<p>Leonidas</p>');
      done();
    });
  });

  it('does not cache by default', function(done) {
    var locals = { user: user };
    var calls = 0;

    fs.readFileSync = function() {
      ++calls;
      return readFileSync.apply(this, arguments);
    };

    fs.readFile = function() {
      ++calls;
      readFile.apply(this, arguments);
    };

    engine(path, locals, function(err, html) {
      if(err) return done(err);
      html.should.equal('<p>Leonidas</p>');
      engine(path, locals, function(err, html) {
        if(err) return done(err);
        html.should.equal('<p>Leonidas</p>');
        calls.should.equal(2);
        done();
      });
    });
  });

  it('supports caching', function(done) {
    var locals = { user: user, cache: true };
    engine(path, locals, function(err, html) {
      if(err) return done(err);
      fs.readFile = function(path) {
        done(new Error('fs.readFile() called with ' + path));
      };
      html.should.equal('<p>Leonidas</p>');
      engine(path, locals, function(err, html) {
        if(err) return done(err);
        html.should.equal('<p>Leonidas</p>');
        done();
      });
    });
  });

  it('supports rendering a string', function(done) {
    var str = fs.readFileSync('test/fixtures/user.hbs').toString().trim();
    var locals = { user: user };
    engine.render(str, locals, function(err, html) {
      if(err) return done(err);
      html.should.equal('<p>Leonidas</p>');
      done();
    });
  });

  it('supports partials', function(done) {
    path = 'test/fixtures/partials.hbs';
    var locals = { user: user, partials: { partial: 'user' } };
    engine(path, locals, function(err, html) {
      if(err) return done(err);
      html.should.equal('<p>Leonidas</p>');
      done();
    });
  });

  it('supports helpers', function(done) {
    user = { name: '<strong>Leonidas</strong>' };
    var str = fs.readFileSync('test/fixtures/helpers.hbs').toString().trim();
    var locals = { user: user, helpers: { safe: function(object) {
      return new handlebars.SafeString(object);
    }}};

    engine.render(str, locals, function(err, html) {
      if(err) return done(err);
      html.should.equal('<strong>Leonidas</strong>');
      done();
    });
  });
});
