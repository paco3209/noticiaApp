var fs = require('fs');
var path = require('path');
var join = path.join;
var dirname = path.dirname;
var extname = path.extname;

var readCache = {};
var cacheStore = {};

function cache(options, compiled) {
  if(compiled && options.filename && options.cache) {
    delete readCache[options.filename];
    cacheStore[options.filename] = compiled;
    return compiled;
  }

  if(options.filename && options.cache) {
    return cacheStore[options.filename];
  }

  return compiled;
}

function read(path, options, fn) {
  // cached only if cached is a string and not a compiled template function
  var str = readCache[path];
  var cached = options.cache && str && 'string' === typeof str;
  if(cached) return fn(null, str);

  fs.readFile(path, 'utf8', function(err, str) {
    if(err) return fn(err);
    str = str.trim();
    if(options.cache) readCache[path] = str;
    fn(null, str);
  });
}

function readPartials(path, options, fn) {
  if(!options.partials) return fn();
  var partials = options.partials;
  var keys = Object.keys(partials);

  function next(index) {
    if(index === keys.length) return fn(null);
    var key = keys[index];
    var file = join(dirname(path), partials[key] + extname(path));
    read(file, options, function(err, str) {
      if(err) return fn(err);
      options.partials[key] = str;
      next(++index);
    });
  }

  next(0);
}

exports = module.exports = function(path, options, fn) {
  options.filename = path;
  readPartials(path, options, function(err) {
    if(err) return fn(err);
    if(cache(options)) {
      exports.render('', options, fn);
    } else {
      read(path, options, function(err, str) {
        if(err) return fn(err);
        exports.render(str, options, fn);
      });
    }
  });
};

exports.render = function(str, options, fn) {
  var handlebars = require('handlebars'), partial, helper, template;
  try {
    for(partial in options.partials) {
      handlebars.registerPartial(partial, options.partials[partial]);
    }
    for(helper in options.helpers) {
      handlebars.registerHelper(helper, options.helpers[helper]);
    }
    template = cache(options) || cache(options, handlebars.compile(str, options));
    fn(null, template(options));
  } catch(err) {
    fn(err);
  }
};
